{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CHECK_ROOM } from \"./types\";\nexport const checkRoom = id => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true ? _objectSpread({}, room, {\n      checked: !room.checked\n    }) : room;\n  }); //roomAutoChecks(id);\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  //   console.log(id);\n  let room = getState().roomObj.rooms.filter(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  console.log(room);\n\n  if (room.check === true) {}\n};","map":{"version":3,"sources":["/Users/zhiwang/Downloads/Assessment/Assessment2/redux/actions/roomActions.js"],"names":["CHECK_ROOM","checkRoom","id","dispatch","getState","rooms","roomObj","map","room","ableToCheck","checked","type","payload","roomAutoChecks","filter","console","log","check"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,SAA3B;AAEA,OAAO,MAAMC,SAAS,GAAGC,EAAE,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACrD,MAAIC,KAAK,GAAGD,QAAQ,GAAGE,OAAX,CAAmBD,KAA/B;AAEAA,EAAAA,KAAK,GAAGA,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI;AACxB,WAAOA,IAAI,CAACN,EAAL,KAAYA,EAAZ,IAAkBM,IAAI,CAACC,WAAL,KAAqB,IAAvC,qBAEED,IAFF;AAGDE,MAAAA,OAAO,EAAE,CAACF,IAAI,CAACE;AAHd,SAKHF,IALJ;AAMD,GAPO,CAAR,CAHqD,CAWrD;;AAEAL,EAAAA,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEX,UADC;AAEPY,IAAAA,OAAO,EAAEP;AAFF,GAAD,CAAR;AAID,CAjBM;AAkBP,OAAO,MAAMQ,cAAc,GAAGX,EAAE,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC1D;AACA,MAAII,IAAI,GAAGJ,QAAQ,GAAGE,OAAX,CAAmBD,KAAnB,CAAyBS,MAAzB,CAAgCN,IAAI,IAAI;AACjD,QAAIA,IAAI,CAACN,EAAL,KAAYA,EAAhB,EAAoB;AAClB,aAAOM,IAAP;AACD;AACF,GAJU,CAAX;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;;AACA,MAAIA,IAAI,CAACS,KAAL,KAAe,IAAnB,EAAyB,CACxB;AACF,CAVM","sourcesContent":["import { CHECK_ROOM } from \"./types\";\n\nexport const checkRoom = id => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n\n  rooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true\n      ? {\n          ...room,\n          checked: !room.checked\n        }\n      : room;\n  });\n  //roomAutoChecks(id);\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  //   console.log(id);\n  let room = getState().roomObj.rooms.filter(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  console.log(room);\n  if (room.check === true) {\n  }\n};\n"]},"metadata":{},"sourceType":"module"}