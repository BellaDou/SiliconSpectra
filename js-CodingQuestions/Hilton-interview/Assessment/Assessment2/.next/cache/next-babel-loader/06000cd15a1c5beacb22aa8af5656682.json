{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\nexport const checkRoom = id => (dispatch, getState) => {\n  const rooms = getState().roomObj.rooms;\n  const newRooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true ? _objectSpread({}, room, {\n      checked: !room.checked\n    }) : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: newRooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: true\n      }) : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: false\n      }) : room;\n    });\n  }\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id ? _objectSpread({}, room, {\n      [e.target.id]: e.target.value\n    }) : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const submitRooms = () => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  const checkedRooms = rooms.filter(room => {\n    return (room.checked || !room.ableToCheck) && _objectSpread({}, room);\n  });\n  console.log(checkedRooms);\n  dispatch({\n    type: SUBMIT_ROOM,\n    payload: checkedRooms\n  });\n};","map":{"version":3,"sources":["/Users/zhiwang/Downloads/Assessment/Assessment2/redux/actions/roomActions.js"],"names":["CHECK_ROOM","SUBMIT_ROOM","checkRoom","id","dispatch","getState","rooms","roomObj","newRooms","map","room","ableToCheck","checked","type","payload","roomAutoChecks","checkedRoom","find","setAdultsOrChildren","e","target","value","submitRooms","checkedRooms","filter","console","log"],"mappings":"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","sourcesContent":["import { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\n\nexport const checkRoom = id => (dispatch, getState) => {\n  const rooms = getState().roomObj.rooms;\n  const newRooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true\n      ? {\n          ...room,\n          checked: !room.checked\n        }\n      : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: newRooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: true\n          }\n        : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: false\n          }\n        : room;\n    });\n  }\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id\n      ? {\n          ...room,\n          [e.target.id]: e.target.value\n        }\n      : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const submitRooms = () => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  const checkedRooms = rooms.filter(room => {\n    return (\n      (room.checked || !room.ableToCheck) && {\n        ...room\n      }\n    );\n  });\n  console.log(checkedRooms);\n  dispatch({\n    type: SUBMIT_ROOM,\n    payload: checkedRooms\n  });\n};\n"]},"metadata":{},"sourceType":"module"}