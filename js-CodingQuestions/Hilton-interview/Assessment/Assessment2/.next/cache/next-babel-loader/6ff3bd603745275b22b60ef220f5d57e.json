{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHECK_ROOM } from \"./types\";\nexport var checkRoom = function checkRoom(id) {\n  return function (dispatch, getState) {\n    var rooms = getState().roomObj.rooms;\n    rooms = rooms.map(function (room) {\n      return room.id === id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: !room.checked\n      }) : room;\n    }); //roomAutoChecks(id);\n\n    dispatch({\n      type: CHECK_ROOM,\n      payload: rooms\n    });\n  };\n};\nexport var roomAutoChecks = function roomAutoChecks(id) {\n  return function (dispatch, getState) {\n    //   console.log(id);\n    var checkedRoom = getState().roomObj.rooms.find(function (room) {\n      if (room.id === id) {\n        return room;\n      }\n    });\n    var rooms = getState().roomObj.rooms;\n\n    if (checkedRoom.checked === true) {\n      rooms = rooms.map(function (room) {\n        return room.id < id && room.ableToCheck === true ? _objectSpread({}, room, {\n          checked: true\n        }) : room;\n      });\n    } else {\n      rooms = rooms.map(function (room) {\n        return room.id > id && room.ableToCheck === true ? _objectSpread({}, room, {\n          checked: false\n        }) : room;\n      });\n    }\n\n    dispatch({\n      type: CHECK_ROOM,\n      payload: rooms\n    });\n  };\n};\nexport var setAdultsOrChildren = function setAdultsOrChildren(e, id) {\n  return function (dispatch, getState) {\n    var rooms = getState().roomObj.rooms;\n    rooms = rooms.map(function (room) {\n      return room.id === id ? _objectSpread({}, room, _defineProperty({}, e.target.id, e.target.value)) : room;\n    });\n    dispatch({\n      type: CHECK_ROOM,\n      payload: rooms\n    });\n  };\n};\nexport var submitRooms = function submitRooms(e) {\n  return function (dispatch, getState) {\n    console.log(\"event\", e);\n  };\n};","map":{"version":3,"sources":["/Users/zhiwang/Downloads/Assessment/Assessment2/redux/actions/roomActions.js"],"names":["CHECK_ROOM","checkRoom","id","dispatch","getState","rooms","roomObj","map","room","ableToCheck","checked","type","payload","roomAutoChecks","checkedRoom","find","setAdultsOrChildren","e","target","value","submitRooms","console","log"],"mappings":"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","sourcesContent":["import { CHECK_ROOM } from \"./types\";\n\nexport const checkRoom = id => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n\n  rooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true\n      ? {\n          ...room,\n          checked: !room.checked\n        }\n      : room;\n  });\n  //roomAutoChecks(id);\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  //   console.log(id);\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: true\n          }\n        : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: false\n          }\n        : room;\n    });\n  }\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id\n      ? {\n          ...room,\n          [e.target.id]: e.target.value\n        }\n      : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const submitRooms = e => (dispatch, getState) => {\n  console.log(\"event\", e);\n};\n"]},"metadata":{},"sourceType":"module"}