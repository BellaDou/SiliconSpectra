{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\nexport const checkRoom = id => (dispatch, getState) => {\n  //const rooms = getState().roomObj.rooms;\n  //console.log(rooms);\n  // const rooms = getState().roomObj.rooms.map(room => {\n  //   return room.id === id && room.ableToCheck === true\n  //     ? {\n  //         ...room,\n  //         checked: !room.checked\n  //       }\n  //     : room;\n  // });\n  const rooms = [{\n    id: 1,\n    ableToCheck: false,\n    adults: 1,\n    children: 0\n  }, {\n    id: 2,\n    ableToCheck: true,\n    checked: false,\n    adults: 1,\n    children: 0\n  }, {\n    id: 3,\n    ableToCheck: true,\n    checked: false,\n    adults: 1,\n    children: 0\n  }, {\n    id: 4,\n    ableToCheck: true,\n    checked: false,\n    adults: 1,\n    children: 0\n  }];\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: true\n      }) : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: false\n      }) : room;\n    });\n  }\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id ? _objectSpread({}, room, {\n      [e.target.id]: e.target.value\n    }) : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const submitRooms = () => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  const checkedRooms = rooms.filter(room => {\n    return (room.checked || !room.ableToCheck) && _objectSpread({}, room);\n  });\n  console.log(checkedRooms);\n  dispatch({\n    type: SUBMIT_ROOM,\n    payload: checkedRooms\n  });\n};","map":{"version":3,"sources":["/Users/zhiwang/Downloads/Assessment/Assessment2/redux/actions/roomActions.js"],"names":["CHECK_ROOM","SUBMIT_ROOM","checkRoom","id","dispatch","getState","rooms","ableToCheck","adults","children","checked","type","payload","roomAutoChecks","checkedRoom","roomObj","find","room","map","setAdultsOrChildren","e","target","value","submitRooms","checkedRooms","filter","console","log"],"mappings":"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","sourcesContent":["import { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\n\nexport const checkRoom = id => (dispatch, getState) => {\n  //const rooms = getState().roomObj.rooms;\n  //console.log(rooms);\n\n  // const rooms = getState().roomObj.rooms.map(room => {\n  //   return room.id === id && room.ableToCheck === true\n  //     ? {\n  //         ...room,\n  //         checked: !room.checked\n  //       }\n  //     : room;\n  // });\n  const rooms = [\n    { id: 1, ableToCheck: false, adults: 1, children: 0 },\n    { id: 2, ableToCheck: true, checked: false, adults: 1, children: 0 },\n    { id: 3, ableToCheck: true, checked: false, adults: 1, children: 0 },\n    { id: 4, ableToCheck: true, checked: false, adults: 1, children: 0 }\n  ];\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: true\n          }\n        : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: false\n          }\n        : room;\n    });\n  }\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id\n      ? {\n          ...room,\n          [e.target.id]: e.target.value\n        }\n      : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const submitRooms = () => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  const checkedRooms = rooms.filter(room => {\n    return (\n      (room.checked || !room.ableToCheck) && {\n        ...room\n      }\n    );\n  });\n  console.log(checkedRooms);\n  dispatch({\n    type: SUBMIT_ROOM,\n    payload: checkedRooms\n  });\n};\n"]},"metadata":{},"sourceType":"module"}