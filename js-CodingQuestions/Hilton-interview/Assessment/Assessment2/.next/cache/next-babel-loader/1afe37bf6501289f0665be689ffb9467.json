{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHECK_ROOM } from \"./types\";\nexport var checkRoom = function checkRoom(id) {\n  return function (dispatch, getState) {\n    console.log(id);\n    var rooms = getState().roomObj.rooms;\n\n    if (id == 1) {}\n\n    rooms = rooms.map(function (room) {\n      return room.id === id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: !room.checked\n      }) : room;\n    });\n    console.log(rooms);\n    dispatch({\n      type: CHECK_ROOM,\n      payload: rooms\n    });\n    roomAutoChecks(id);\n  };\n};\n\nvar roomAutoChecks = function roomAutoChecks(id) {\n  return function (dispatch, getState) {\n    var room = getState().roomObj.rooms[id];\n  };\n};","map":{"version":3,"sources":["/Users/zhiwang/Downloads/Assessment/Assessment2/redux/actions/roomActions.js"],"names":["CHECK_ROOM","checkRoom","id","dispatch","getState","console","log","rooms","roomObj","map","room","ableToCheck","checked","type","payload","roomAutoChecks"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,SAA3B;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,EAAE;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACrDC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACA,QAAIK,KAAK,GAAGH,QAAQ,GAAGI,OAAX,CAAmBD,KAA/B;;AACA,QAAIL,EAAE,IAAI,CAAV,EAAa,CACZ;;AACDK,IAAAA,KAAK,GAAGA,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI,EAAI;AACxB,aAAOA,IAAI,CAACR,EAAL,KAAYA,EAAZ,IAAkBQ,IAAI,CAACC,WAAL,KAAqB,IAAvC,qBAEED,IAFF;AAGDE,QAAAA,OAAO,EAAE,CAACF,IAAI,CAACE;AAHd,WAKHF,IALJ;AAMD,KAPO,CAAR;AAQAL,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEAJ,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAIAQ,IAAAA,cAAc,CAACb,EAAD,CAAd;AACD,GApB0B;AAAA,CAApB;;AAqBP,IAAMa,cAAc,GAAG,SAAjBA,cAAiB,CAAAb,EAAE;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACnD,QAAIM,IAAI,GAAGN,QAAQ,GAAGI,OAAX,CAAmBD,KAAnB,CAAyBL,EAAzB,CAAX;AACD,GAFwB;AAAA,CAAzB","sourcesContent":["import { CHECK_ROOM } from \"./types\";\n\nexport const checkRoom = id => (dispatch, getState) => {\n  console.log(id);\n  let rooms = getState().roomObj.rooms;\n  if (id == 1) {\n  }\n  rooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true\n      ? {\n          ...room,\n          checked: !room.checked\n        }\n      : room;\n  });\n  console.log(rooms);\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n  roomAutoChecks(id);\n};\nconst roomAutoChecks = id => (dispatch, getState) => {\n  let room = getState().roomObj.rooms[id];\n};\n"]},"metadata":{},"sourceType":"module"}