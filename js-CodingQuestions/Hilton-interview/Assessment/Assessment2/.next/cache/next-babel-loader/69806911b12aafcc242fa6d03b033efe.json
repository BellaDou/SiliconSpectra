{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\nexport var checkRoom = function checkRoom(id) {\n  return function (dispatch, getState) {\n    // rooms = getState().roomObj.rooms.map(room => {\n    //   return room.id === id && room.ableToCheck === true\n    //     ? {\n    //         ...room,\n    //         checked: !room.checked\n    //       }\n    //     : room;\n    // });\n    var roomObj = getState().roomObj;\n    var newRooms = roomObj.rooms.map(function (room) {\n      return room.id === id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: !room.checked\n      }) : room;\n    }); // rooms = [\n    //   { id: 1, ableToCheck: false, adults: 1, children: 0 },\n    //   { id: 2, ableToCheck: true, checked: false, adults: 1, children: 0 },\n    //   { id: 3, ableToCheck: true, checked: false, adults: 1, children: 0 },\n    //   { id: 4, ableToCheck: true, checked: false, adults: 1, children: 0 }\n    // ];\n\n    dispatch({\n      type: CHECK_ROOM,\n      payload: newRooms\n    });\n    return {\n      type: CHECK_ROOM,\n      payload: newRooms\n    };\n  };\n};\nexport var roomAutoChecks = function roomAutoChecks(id) {\n  return function (dispatch, getState) {\n    var checkedRoom = getState().roomObj.rooms.find(function (room) {\n      if (room.id === id) {\n        return room;\n      }\n    });\n    var rooms = getState().roomObj.rooms;\n\n    if (checkedRoom.checked === true) {\n      rooms = rooms.map(function (room) {\n        return room.id < id && room.ableToCheck === true ? _objectSpread({}, room, {\n          checked: true\n        }) : room;\n      });\n    } else {\n      rooms = rooms.map(function (room) {\n        return room.id > id && room.ableToCheck === true ? _objectSpread({}, room, {\n          checked: false\n        }) : room;\n      });\n    }\n\n    dispatch({\n      type: CHECK_ROOM,\n      payload: rooms\n    });\n  };\n};\nexport var setAdultsOrChildren = function setAdultsOrChildren(e, id) {\n  return function (dispatch, getState) {\n    var rooms = getState().roomObj.rooms;\n    rooms = rooms.map(function (room) {\n      return room.id === id ? _objectSpread({}, room, _defineProperty({}, e.target.id, e.target.value)) : room;\n    });\n    dispatch({\n      type: CHECK_ROOM,\n      payload: rooms\n    });\n  };\n};\nexport var submitRooms = function submitRooms() {\n  return function (dispatch, getState) {\n    var rooms = getState().roomObj.rooms;\n    var checkedRooms = rooms.filter(function (room) {\n      return (room.checked || !room.ableToCheck) && _objectSpread({}, room);\n    });\n    console.log(checkedRooms);\n    dispatch({\n      type: SUBMIT_ROOM,\n      payload: checkedRooms\n    });\n  };\n};","map":{"version":3,"sources":["/Users/zhiwang/Downloads/Assessment/Assessment2/redux/actions/roomActions.js"],"names":["CHECK_ROOM","SUBMIT_ROOM","checkRoom","id","dispatch","getState","roomObj","newRooms","rooms","map","room","ableToCheck","checked","type","payload","roomAutoChecks","checkedRoom","find","setAdultsOrChildren","e","target","value","submitRooms","checkedRooms","filter","console","log"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,SAAxC;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,EAAE;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAGD,QAAQ,GAAGC,OAA3B;AACA,QAAIC,QAAQ,GAAGD,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAkB,UAAAC,IAAI,EAAI;AACvC,aAAOA,IAAI,CAACP,EAAL,KAAYA,EAAZ,IAAkBO,IAAI,CAACC,WAAL,KAAqB,IAAvC,qBAEED,IAFF;AAGDE,QAAAA,OAAO,EAAE,CAACF,IAAI,CAACE;AAHd,WAKHF,IALJ;AAMD,KAPc,CAAf,CAVqD,CAkBrD;AACA;AACA;AACA;AACA;AACA;;AACAN,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAIA,WAAO;AACLM,MAAAA,IAAI,EAAEb,UADD;AAELc,MAAAA,OAAO,EAAEP;AAFJ,KAAP;AAID,GAhC0B;AAAA,CAApB;AAiCP,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAAZ,EAAE;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC1D,QAAIW,WAAW,GAAGX,QAAQ,GAAGC,OAAX,CAAmBE,KAAnB,CAAyBS,IAAzB,CAA8B,UAAAP,IAAI,EAAI;AACtD,UAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAOO,IAAP;AACD;AACF,KAJiB,CAAlB;AAKA,QAAIF,KAAK,GAAGH,QAAQ,GAAGC,OAAX,CAAmBE,KAA/B;;AACA,QAAIQ,WAAW,CAACJ,OAAZ,KAAwB,IAA5B,EAAkC;AAChCJ,MAAAA,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AACxB,eAAOA,IAAI,CAACP,EAAL,GAAUA,EAAV,IAAgBO,IAAI,CAACC,WAAL,KAAqB,IAArC,qBAEED,IAFF;AAGDE,UAAAA,OAAO,EAAE;AAHR,aAKHF,IALJ;AAMD,OAPO,CAAR;AAQD,KATD,MASO;AACLF,MAAAA,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AACxB,eAAOA,IAAI,CAACP,EAAL,GAAUA,EAAV,IAAgBO,IAAI,CAACC,WAAL,KAAqB,IAArC,qBAEED,IAFF;AAGDE,UAAAA,OAAO,EAAE;AAHR,aAKHF,IALJ;AAMD,OAPO,CAAR;AAQD;;AACDN,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR;AAID,GA9B+B;AAAA,CAAzB;AAgCP,OAAO,IAAMU,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,CAAD,EAAIhB,EAAJ;AAAA,SAAW,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpE,QAAIG,KAAK,GAAGH,QAAQ,GAAGC,OAAX,CAAmBE,KAA/B;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AACxB,aAAOA,IAAI,CAACP,EAAL,KAAYA,EAAZ,qBAEEO,IAFF,sBAGAS,CAAC,CAACC,MAAF,CAASjB,EAHT,EAGcgB,CAAC,CAACC,MAAF,CAASC,KAHvB,KAKHX,IALJ;AAMD,KAPO,CAAR;AAQAN,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEb,UADC;AAEPc,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR;AAID,GAdkC;AAAA,CAA5B;AAgBP,OAAO,IAAMc,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAM,UAAClB,QAAD,EAAWC,QAAX,EAAwB;AACvD,QAAIG,KAAK,GAAGH,QAAQ,GAAGC,OAAX,CAAmBE,KAA/B;AACA,QAAMe,YAAY,GAAGf,KAAK,CAACgB,MAAN,CAAa,UAAAd,IAAI,EAAI;AACxC,aACE,CAACA,IAAI,CAACE,OAAL,IAAgB,CAACF,IAAI,CAACC,WAAvB,uBACKD,IADL,CADF;AAKD,KANoB,CAArB;AAOAe,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACAnB,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAES;AAFF,KAAD,CAAR;AAID,GAd0B;AAAA,CAApB","sourcesContent":["import { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\n\nexport const checkRoom = id => (dispatch, getState) => {\n  // rooms = getState().roomObj.rooms.map(room => {\n  //   return room.id === id && room.ableToCheck === true\n  //     ? {\n  //         ...room,\n  //         checked: !room.checked\n  //       }\n  //     : room;\n  // });\n  const roomObj = getState().roomObj;\n  let newRooms = roomObj.rooms.map(room => {\n    return room.id === id && room.ableToCheck === true\n      ? {\n          ...room,\n          checked: !room.checked\n        }\n      : room;\n  });\n  // rooms = [\n  //   { id: 1, ableToCheck: false, adults: 1, children: 0 },\n  //   { id: 2, ableToCheck: true, checked: false, adults: 1, children: 0 },\n  //   { id: 3, ableToCheck: true, checked: false, adults: 1, children: 0 },\n  //   { id: 4, ableToCheck: true, checked: false, adults: 1, children: 0 }\n  // ];\n  dispatch({\n    type: CHECK_ROOM,\n    payload: newRooms\n  });\n  return {\n    type: CHECK_ROOM,\n    payload: newRooms\n  };\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: true\n          }\n        : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true\n        ? {\n            ...room,\n            checked: false\n          }\n        : room;\n    });\n  }\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id\n      ? {\n          ...room,\n          [e.target.id]: e.target.value\n        }\n      : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\n\nexport const submitRooms = () => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  const checkedRooms = rooms.filter(room => {\n    return (\n      (room.checked || !room.ableToCheck) && {\n        ...room\n      }\n    );\n  });\n  console.log(checkedRooms);\n  dispatch({\n    type: SUBMIT_ROOM,\n    payload: checkedRooms\n  });\n};\n"]},"metadata":{},"sourceType":"module"}