{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CHECK_ROOM, SUBMIT_ROOM } from \"./types\";\nexport const checkRoom = id => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id && room.ableToCheck === true ? _objectSpread({}, room, {\n      checked: !room.checked\n    }) : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const roomAutoChecks = id => (dispatch, getState) => {\n  let checkedRoom = getState().roomObj.rooms.find(room => {\n    if (room.id === id) {\n      return room;\n    }\n  });\n  let rooms = getState().roomObj.rooms;\n\n  if (checkedRoom.checked === true) {\n    rooms = rooms.map(room => {\n      return room.id < id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: true\n      }) : room;\n    });\n  } else {\n    rooms = rooms.map(room => {\n      return room.id > id && room.ableToCheck === true ? _objectSpread({}, room, {\n        checked: false\n      }) : room;\n    });\n  }\n\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const setAdultsOrChildren = (e, id) => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  rooms = rooms.map(room => {\n    return room.id === id ? _objectSpread({}, room, {\n      [e.target.id]: e.target.value\n    }) : room;\n  });\n  dispatch({\n    type: CHECK_ROOM,\n    payload: rooms\n  });\n};\nexport const submitRooms = () => (dispatch, getState) => {\n  let rooms = getState().roomObj.rooms;\n  const checkedRooms = rooms.filter(room => {\n    return (room.checked || !room.ableToCheck) && _objectSpread({}, room);\n  });\n  console.log(checkedRooms);\n  dispatch({\n    type: SUBMIT_ROOM,\n    payload: checkedRooms\n  });\n};","map":null,"metadata":{},"sourceType":"module"}